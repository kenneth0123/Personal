{"version":3,"sources":["Clock.jsx","App.jsx","index.js"],"names":["Clock","props","state","days","hours","minutes","seconds","toFrom","console","log","setInterval","getTimeUntil","deadline","num","time","Date","parse","toFromText","Math","floor","abs","this","setState","className","leading0","Component","App","newDeadline","getLongDate","getTimePeriod","formattedDeadline","deadlineChunks","split","length","deadlineYear","parseInt","returnProperDate","Form","inline","type","placeholder","onChange","event","target","value","Button","onClick","changeDeadline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.833f83db.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass Clock extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            days: 0,\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0,\r\n            toFrom: 'to'\r\n        }\r\n        console.log('this.props', this.props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        setInterval(() => this.getTimeUntil(this.props.deadline), 1000);\r\n    }\r\n    \r\n    /**\r\n     * This function adds leading zeroes to the argument if it is less than 10\r\n     * \r\n     * @param {the number to be added leading zeros with} num \r\n     */\r\n    leading0(num){\r\n        return num < 10 ? '0' + num : num;\r\n    }\r\n    \r\n    /**\r\n     * This function takes a date argument and calculates the remaining time until the argument\r\n     * \r\n     * @param {The date to calculate time until} deadline \r\n     */\r\n    getTimeUntil(deadline){\r\n        const time = Date.parse(deadline) - Date.parse(new Date());\r\n        let seconds = 0;\r\n        let minutes = 0;\r\n        let hours = 0;\r\n        let days = 0;\r\n        let toFromText = 'to'\r\n\r\n        if(time > 0){\r\n            seconds = Math.floor((time/1000) % 60);\r\n            minutes = Math.floor((time/1000/60) % 60);\r\n            hours = Math.floor(time/(1000*60*60) % 24);\r\n            days = Math.floor(time/(1000*60*60*24));\r\n\r\n        }\r\n        else{\r\n            seconds = Math.abs(Math.floor((time/1000) % 60));\r\n            minutes = Math.abs(Math.floor((time/1000/60) % 60));\r\n            hours = Math.abs(Math.floor(time/(1000*60*60) % 24));\r\n            days = Math.abs(Math.floor(time/(1000*60*60*24)));\r\n            toFromText = 'from';\r\n        }\r\n\r\n\r\n        this.setState({days, hours, minutes, seconds, toFromText});\r\n\r\n    }\r\n    \r\n    /**\r\n     * Render application into the browser\r\n     */\r\n    render() {\r\n        return(\r\n        <div>\r\n            <div className='Clock-days'>{this.leading0(this.state.days)} Days</div>\r\n            <div className='Clock-hours'>{this.leading0(this.state.hours)} Hours</div>\r\n            <div className='Clock-minutes'>{this.leading0(this.state.minutes)} Minutes</div>\r\n            <div className='Clock-seconds'>{this.leading0(this.state.seconds)} Seconds</div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Clock","import React, { Component } from 'react';\r\nimport Clock from './Clock';\r\nimport './App.css';\r\nimport { Form, FormControl, Button } from 'react-bootstrap';\r\n\r\nclass App extends Component {\r\n    //States\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            deadline: 'December 25, 2020',\r\n            newDeadline: '',\r\n            toFrom: 'to'\r\n        }\r\n    }\r\n    \r\n    //Setters\r\n    changeDeadline(){\r\n        this.setState({deadline: this.getLongDate(this.state.newDeadline)});\r\n        this.setState({toFrom: this.getTimePeriod(this.state.newDeadline)});\r\n        console.log('state', this.state);\r\n    }\r\n    \r\n    /**\r\n     * This function returns the appropriate text based on whether the selected deadline is past current time\r\n     * \r\n     * @param {*} newDeadline \r\n     */\r\n    getTimePeriod(newDeadline){\r\n        let dateToParse = this.getLongDate(newDeadline);\r\n        let toFromText = 'to';\r\n\r\n        const time = Date.parse(newDeadline) - Date.parse(new Date());\r\n        if( time < 0 )\r\n        {\r\n            toFromText = 'from';\r\n        }\r\n        \r\n        return toFromText;\r\n    }\r\n\r\n    /**\r\n     * This function takes the date argument and returns the long form format\r\n     * \r\n     * @param {the date to be formatted} newDeadline \r\n     */\r\n    getLongDate(newDeadline){\r\n        let formattedDeadline = newDeadline;\r\n\r\n        let deadlineChunks = newDeadline.split('-');\r\n\r\n        let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n        if( deadlineChunks.length > 1 ){\r\n            console.log('deadlineChunks', deadlineChunks);\r\n\r\n            let deadlineYear = deadlineChunks[0]\r\n            let deadlineMonth = months[parseInt(deadlineChunks[1]) - 1];\r\n            let deadlineDate = deadlineChunks[2];\r\n    \r\n            formattedDeadline = deadlineMonth + ' ' + deadlineDate + ', ' + deadlineYear;\r\n        }\r\n\r\n\r\n        return formattedDeadline;\r\n    }\r\n    \r\n    /**\r\n     * This function returns the date in the appropriate format using existing functions.  May add more code depending on situation\r\n     * \r\n     * @param {The deadline state initiated to a value in the constructor} newDeadline \r\n     */\r\n    returnProperDate(newDeadline){\r\n        console.log('NewDeadline', this.getLongDate(newDeadline));\r\n        return this.getLongDate(newDeadline);\r\n    }\r\n    \r\n    //Render the application into browser\r\n    render(){\r\n        return(\r\n            <div className='App'>\r\n                <div className='App-title'>Countdown {this.state.toFrom} {this.returnProperDate(this.state.deadline)}</div>\r\n                <Clock deadline={this.state.deadline} />\r\n                <Form inline className='Deadline-controls'>\r\n                    <input type='date' className='Deadline-input' placeholder='new date' onChange={event => this.setState({newDeadline: event.target.value})} />\r\n                    <Button onClick={() => this.changeDeadline()}>Submit</Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />, document.getElementById(\"root\")\r\n);"],"sourceRoot":""}